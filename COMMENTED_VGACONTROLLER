module VGA(
    input clk, // Input clock signal for synchronizing VGA output
    input reset, // Reset signal to initialize counters and outputs
    
    // Red, Green, Blue color outputs (4 bits each for intensity levels)
    output [3:0] VGA_R,
    output [3:0] VGA_G,
    output [3:0] VGA_B,

    // Horizontal sync and vertical sync signals for VGA display
    output VGA_HS,
    output VGA_VS,

    // Input pixel value (determines the color intensity)
    input pixel,
    // Outputs for the current pixel's row (line) and column (position on the line)
    output [$clog2(VGA_HEIGHT):0] currentLine,
    output [$clog2(VGA_WIDTH):0] currentColumn
);

// VGA resolution parameters for 640x480 @ 60Hz
parameter VGA_WIDTH = 640; // Total width of the display area
parameter VGA_HEIGHT = 480; // Total height of the display area

// Timing parameters for horizontal sync signals
parameter WIDTH_FRONT_PORCH = 16; // Pixels before the sync pulse
parameter WIDTH_SYNC_PULSE = 96; // Duration of the sync pulse
parameter WIDTH_BACK_PORCH = 48; // Pixels after the sync pulse

// Timing parameters for vertical sync signals
parameter HEIGHT_FRONT_PORCH = 10; // Lines before the sync pulse
parameter HEIGHT_SYNC_PULSE = 2; // Duration of the sync pulse
parameter HEIGHT_BACK_PORCH = 33; // Lines after the sync pulse

// Sync signal polarity (0 for negative, 1 for positive)
parameter SYNC_SIGNAL_POLARITY = 1'b0;

// Derived parameters for total frame dimensions
parameter LINE_WIDTH = WIDTH_FRONT_PORCH + WIDTH_SYNC_PULSE + WIDTH_BACK_PORCH + VGA_WIDTH;
parameter FRAME_HEIGHT = HEIGHT_FRONT_PORCH + HEIGHT_SYNC_PULSE + HEIGHT_BACK_PORCH + VGA_HEIGHT;

wire pixel_int; // Internal signal to hold the pixel value based on position

// Horizontal and vertical counters to track pixel positions
reg [$clog2(LINE_WIDTH):0] h_count; // Horizontal position counter
reg [$clog2(FRAME_HEIGHT):0] v_count; // Vertical position counter

// Assigning pixel intensity values to the VGA color channels
assign VGA_R[3:0] = {4{pixel_int}};
assign VGA_G[3:0] = {4{pixel_int}};
assign VGA_B[3:0] = {4{pixel_int}};

// Determine pixel output: display the pixel within the visible area, otherwise output 0
assign pixel_int = (h_count < VGA_WIDTH && v_count < VGA_HEIGHT) ? pixel : 0;

// Generate horizontal sync signal based on timing parameters
assign VGA_HS = (h_count > (VGA_WIDTH + WIDTH_FRONT_PORCH) && h_count < (LINE_WIDTH - WIDTH_BACK_PORCH)) 
                ? SYNC_SIGNAL_POLARITY 
                : ~SYNC_SIGNAL_POLARITY;

// Generate vertical sync signal based on timing parameters
assign VGA_VS = (v_count > (VGA_HEIGHT + HEIGHT_FRONT_PORCH) && v_count < (FRAME_HEIGHT - HEIGHT_BACK_PORCH)) 
                ? SYNC_SIGNAL_POLARITY 
                : ~SYNC_SIGNAL_POLARITY;

// Output the current pixel's row and column values
assign currentLine = v_count[$clog2(VGA_HEIGHT):0];
assign currentColumn = h_count[$clog2(VGA_WIDTH):0];

// Clock and reset logic to control the counters
always @ (posedge clk or posedge reset) begin
    if (reset) begin
        // Reset counters to the initial state
        h_count <= 0;
        v_count <= 0;
    end else begin
        // Increment horizontal counter and reset it at the end of a line
        h_count <= (h_count == LINE_WIDTH - 1) ? 0 : h_count + 1;
        // Increment vertical counter at the end of a line and reset at the end of a frame
        v_count <= (h_count == LINE_WIDTH - 1) ? ((v_count == FRAME_HEIGHT - 1) ? 0 : v_count + 1) : v_count;
    end
end

endmodule
